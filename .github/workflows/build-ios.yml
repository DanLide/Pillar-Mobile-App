# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: build-ios

on:
  pull_request:
    branches: [ 'dev' ]

jobs:
  build:

    runs-on: macos-latest

    steps:
      - name: Checkout to repository
        uses: actions/checkout@v3

      - name: Install Carthage
        run: brew install carthage

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'yarn'

      - name: Cache node modules
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Node dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Setup Ruby (bundle)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.6'

      - name: Install Ruby dependencies
        run: bundle install
        working-directory: ios

      - name: Cache Carthage
        uses: actions/cache@v3
        id: carthage-cache
        with:
          path: ios/Carthage
          key: carthage-${{ hashFiles('**/Cartfile.resolved') }}

      - name: Cache Pods
        uses: actions/cache@v3
        id: podcache
        with:
          path: ios/Pods
          key: pods-${{ hashFiles('**/Podfile.lock') }}

      - name: Carthage
        if: steps.carthage-cache.outputs.cache-hit != 'true'
        run: |
          carthage bootstrap --no-use-binaries --platform iOS --cache-builds
          rm -rf ./Carthage/Build/iOS/*.dSYM
        working-directory: ios


      - name: Install Pods
        if: steps.podcache.outputs.cache-hit != 'true'
        run: pod install --repo-update
        working-directory: ios

      - name: Run unit tests
        run: yarn test

      - name: Build app with Fastlane
        run: bundle exec fastlane build
        working-directory: ios
